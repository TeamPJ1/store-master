apiVersion: v1
kind: ConfigMap
metadata:
  name: configserver-cm
data:
  config_server_address: http://config.store.com:8200
# config_server_address: http://configserver:8888
---
apiVersion: v1
kind: Service
metadata:
  name: configserver
  labels:
    app: configserver
spec:
  selector:
    app: configserver
  clusterIP: None
  ports:
    - port: 8888
      name: configserver
      targetPort: 8888
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: configserver
  labels:
    app: web
spec:
  serviceName: "config-server"
  replicas: 1
  selector:
    matchLabels:
      app: configserver
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        app: configserver
    spec:
      containers:
        - image: sedokray/config-server:0.0.1-SNAPSHOT
          name: configserver
          ports:
            - containerPort: 8888
          env:
            - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
              valueFrom:
                configMapKeyRef:
                  name: eureka-cm
                  key: eureka_service_address
            - name: SPRING_CLOUD_CONFIG_URI
              valueFrom:
                configMapKeyRef:
                  name: configserver-cm
                  key: config_server_address
      initContainers:
        - name: init-eureka
          image: busybox:1.28
          command: ['sh', '-c', "until nslookup eureka.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo en attente de eureka; sleep 2; done"]

---
apiVersion: v1
kind: Service
metadata:
  name: configserver-lb
  labels:
    app: eureka
spec:
  selector:
    app: configserver
  type: NodePort
  ports:
    - port: 80
      targetPort: 8888
      nodePort: 30312
      protocol: TCP


# ClusterIP: Expose le service sur une IP interne au cluster. Le choix de cette valeur rend le service uniquement accessible à partir du cluster. Il s'agit du ServiceType par défaut.
# NodePort: Expose le service sur l'IP de chaque nœud sur un port statique (le NodePort). Un service ClusterIP, vers lequel le service NodePort est automatiquement créé. Vous pourrez contacter le service NodePort, depuis l'extérieur du cluster, en demandant <NodeIP>: <NodePort>.
# LoadBalancer: Expose le service en externe à l'aide de l'équilibreur de charge d'un fournisseur de cloud. Les services NodePort et ClusterIP, vers lesquels les itinéraires de l'équilibreur de charge externe, sont automatiquement créés.
# ExternalName : Mappe le service au contenu du champ externalName (par exemple foo.bar.example.com), en renvoyant un enregistrement CNAME avec sa valeur. Aucun proxy d'aucune sorte n'est mis en place.
---
apiVersion: v1
kind: Service
metadata:
  name: configserver-svc
  labels:
    app: configserver
spec:
  selector:
    app: configserver
  type: ExternalName
  externalName: config.store.com
  ports:
    - port: 8200
      targetPort: 8888
      protocol: TCP